----------Heroku Notes----------

---If you already have an app created locally and want to start with heroku---

------------------------------------------------------------------------------------------------------------------------------------------------

--Installing Heroku CLI-- (https://devcenter.heroku.com/articles/heroku-cli)
1) If you haven't done so already, install the heroku CLI with the following command 
$ brew tap heroku/brew && brew install heroku

2) Login to Heroku via the CLI 
$ heroku login

3) Create an app on heroku (Heroku generates a random name for your app. You can pass a parameter to specify your own app name.)
$ heroku create {name_of_your_app}

4) Visit the app at the URL generated by its app name. As a shortcut, you can open the website.
$ heroku open

------------------------------------------------------------------------------------------------------------------------------------------------

--Deploying with GIT-- (https://devcenter.heroku.com/articles/git)

1) Add a remote to your local repository with the heroku git:remote command. All you need is your Heroku app’s name:
$ heroku git:remote -a {name_of_your_app}

2) To deploy your app to Heroku, use the git push command to push the code from your local repository’s main branch to your heroku remote. 
   For example:
$ git push heroku main

2a) To deploy code to Heroku from a non-main branch of your local repository (for example, testbranch), 
use the following syntax push it to the remote’s main branch:
$ git push heroku testbranch:main

------------------------------------------------------------------------------------------------------------------------------------------------

--Provisioning Heroku Postgres-- (https://devcenter.heroku.com/articles/provisioning-heroku-postgres)

1) Use the heroku addons command to determine whether your app already has Heroku Postgres provisioned:
$ heroku addons 

2) If heroku-postgresql doesn’t appear in your app’s list of add-ons, you can provision it with the following CLI command:
$ heroku addons: create heroku-postgresql:<PLAN_NAME>

2a) The command to add on the Postgres free plan is
$ heroku addons:create heroku-postgresql:essential-0

3) As part of the provisioning process, a DATABASE_URL config var is added to your app’s configuration. 
DATABASE_URL contains the URL your app uses to access the database. 
If your app already has a Heroku Postgres database and you’ve provisioned another one, 
this config var’s name instead has the format HEROKU_POSTGRESQL_<COLOR>_URL (for example, HEROKU_POSTGRESQL_YELLOW_URL).

You can confirm the names and values of your app’s config vars with the heroku config command.

------------------------------------------------------------------------------------------------------------------------------------------------

--Congig Variables-- (https://devcenter.heroku.com/articles/getting-started-with-nodejs#define-config-vars)

1) View the config vars that are set using heroku config.
$ heroku config 

2) To add a config variable, run the following command. heroku config:set <VARIABLE_NAME>=<VALUE>
$ heroku config:set GITHUB_USERNAME=joesmith --app {name_of_your_app}

3) To remove a config variable, run the following command. heroku config:unset <VARIABLE_NAME>
$ heroku config:unset GITHUB_USERNAME --app {name_of_your_app}

------------------------------------------------------------------------------------------------------------------------------------------------

--Heroku Logs--

1) To view logs 
$ heroku logs --tail

2) To view logs of a specific app 
$ heroku logs --app {name_of_your_app}

------------------------------------------------------------------------------------------------------------------------------------------------

--Restarting Apps--

1) Login through terminal
$ heroku login

2) Go to Project root 
$ cd path/to/your/project

3) Restart the application on heroku 
$ heroku restart --app your-app-name

